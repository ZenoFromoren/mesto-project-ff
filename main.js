(()=>{"use strict";var __webpack_modules__={333:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  E: () => (/* binding */ popups),\n  N: () => (/* binding */ profileData)\n});\n\n;// CONCATENATED MODULE: ./src/components/modal.js\n\nvar closePopupByEscape = function closePopupByEscape(evt) {\n  if (evt.key === 'Escape') {\n    popups.forEach(function (popup) {\n      if (popup.classList.contains('popup_is-opened')) {\n        closeModal(popup);\n      }\n    });\n  }\n};\nvar closePopupByOverlayClick = function closePopupByOverlayClick(evt) {\n  if (evt.target.classList.contains('popup')) {\n    closeModal(evt.target);\n  }\n};\nvar openModal = function openModal(popupElement) {\n  popupElement.classList.add('popup_is-opened');\n  document.addEventListener('keydown', closePopupByEscape);\n};\nvar closeModal = function closeModal(popupElement) {\n  popupElement.classList.remove('popup_is-opened');\n  document.removeEventListener('keydown', closePopupByEscape);\n  if (!popupElement.classList.contains('popup_type_image')) {\n    popupElement.querySelector('.popup__form').reset();\n  }\n};\n;// CONCATENATED MODULE: ./src/components/api.js\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nvar APIconfig = {\n  baseUrl: 'https://nomoreparties.co/v1/cohort-magistr-2',\n  headers: {\n    authorization: 'eaf014af-7c89-4f38-a8a4-e2b61e5fa806',\n    'Content-Type': 'application/json'\n  }\n};\nvar request = function request(endpoint) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return fetch(\"\".concat(APIconfig.baseUrl, \"/\").concat(endpoint), _objectSpread({\n    method: \"GET\",\n    headers: APIconfig.headers\n  }, options)).then(function (res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status));\n  });\n};\nvar getInitialCards = function getInitialCards() {\n  return request('cards');\n};\nvar getProfileData = function getProfileData() {\n  return request('users/me');\n};\nvar changeProfileData = function changeProfileData(name, about) {\n  return request('users/me', {\n    method: 'PATCH',\n    body: JSON.stringify({\n      name: name,\n      about: about\n    })\n  });\n};\nvar addNewPlace = function addNewPlace(name, link) {\n  return request('cards', {\n    method: 'POST',\n    body: JSON.stringify({\n      name: name,\n      link: link\n    })\n  });\n};\nvar changeAvatar = function changeAvatar(avatar) {\n  return request('users/me/avatar', {\n    method: 'PATCH',\n    body: JSON.stringify({\n      avatar: avatar\n    })\n  });\n};\nvar deleteCard = function deleteCard(cardId) {\n  return request(\"cards/\".concat(cardId), {\n    method: 'DELETE'\n  });\n};\nvar setLike = function setLike(cardId, profileData) {\n  return request(\"cards/likes/\".concat(cardId), {\n    method: 'PUT',\n    body: JSON.stringify(profileData)\n  });\n};\nvar removeLike = function removeLike(cardId, profileData) {\n  return request(\"cards/likes/\".concat(cardId), {\n    method: 'DELETE',\n    body: JSON.stringify(profileData)\n  });\n};\n;// CONCATENATED MODULE: ./src/components/card.js\n\n\nvar handleDeleteCard = function handleDeleteCard(evt, cardId) {\n  deleteCard(cardId).then(evt.target.closest('.card').remove()).catch(function (err) {\n    return console.log(err);\n  });\n};\nvar likeCard = function likeCard(evt, cardId) {\n  if (evt.target.classList.contains('card__like-button_is-active')) {\n    removeLike(cardId, profileData).then(function (res) {\n      evt.target.closest('.card').querySelector('.card__numberOfLikes').textContent = res.likes.length;\n      evt.target.classList.toggle('card__like-button_is-active');\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  } else {\n    setLike(cardId, profileData).then(function (res) {\n      evt.target.closest('.card').querySelector('.card__numberOfLikes').textContent = res.likes.length;\n      evt.target.classList.toggle('card__like-button_is-active');\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  }\n};\nvar createCard = function createCard(cardTitle, cardImage, handleDeleteCard, likeCard, openTypeImagePopup, card, profileData) {\n  var cardTemplate = document.querySelector('#card-template').content;\n  var cardElement = cardTemplate.querySelector('.card').cloneNode(true);\n  var cardLikeButton = cardElement.querySelector('.card__like-button');\n  var cardIsLiked = card.likes.some(function (profile) {\n    return profileData['_id'] === profile['_id'];\n  });\n  var cardNumberOfLikes = cardElement.querySelector('.card__numberOfLikes');\n  var cardDeleteButton = cardElement.querySelector('.card__delete-button');\n  var popupImage = cardElement.querySelector('.card__image');\n  cardElement.querySelector('.card__title').textContent = cardTitle;\n  popupImage.src = cardImage;\n  popupImage.alt = \"\\u0424\\u043E\\u0442\\u043E \".concat(cardTitle);\n  cardNumberOfLikes.textContent = card.likes.length;\n  cardLikeButton.addEventListener('click', function (evt) {\n    return likeCard(evt, card['_id']);\n  });\n  popupImage.addEventListener('click', function () {\n    return openTypeImagePopup(cardTitle, cardImage);\n  });\n  if (card.owner['_id'] !== profileData._id) {\n    cardDeleteButton.remove();\n  }\n  cardIsLiked ? cardLikeButton.classList.add('card__like-button_is-active') : cardLikeButton.classList.remove('card__like-button_is-active');\n  cardDeleteButton.addEventListener('click', function (evt) {\n    return handleDeleteCard(evt, card['_id']);\n  });\n  return cardElement;\n};\n;// CONCATENATED MODULE: ./src/components/validation.js\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nvar showInputError = function showInputError(formElement, inputElement, Validationconfig) {\n  var errorElement = formElement.querySelector(\".\".concat(inputElement.name, \"-error\"));\n  var errorMessage = inputElement.validationMessage;\n  errorElement.textContent = errorMessage;\n  inputElement.classList.add(Validationconfig.inputErrorClass);\n  errorElement.classList.add(Validationconfig.errorClass);\n};\nvar hideInputError = function hideInputError(formElement, inputElement, Validationconfig) {\n  var errorElement = formElement.querySelector(\".\".concat(inputElement.name, \"-error\"));\n  var errorMessage = '';\n  errorElement.textContent = errorMessage;\n  inputElement.classList.remove(Validationconfig.inputErrorClass);\n  errorElement.classList.remove(Validationconfig.errorClass);\n};\nvar toggleButtonState = function toggleButtonState(isValid, buttonElement, Validationconfig) {\n  if (!isValid) {\n    buttonElement.classList.add(Validationconfig.inactiveButtonClass);\n    buttonElement.disabled = true;\n  } else {\n    buttonElement.classList.remove(Validationconfig.inactiveButtonClass);\n    buttonElement.disabled = false;\n  }\n};\nvar checkInputValidity = function checkInputValidity(formElement, inputElement, Validationconfig) {\n  var isInputValid = inputElement.validity.valid;\n  var isPatternMismatch = inputElement.validity.patternMismatch;\n  isPatternMismatch ? inputElement.setCustomValidity(inputElement.dataset.errorMessage) : inputElement.setCustomValidity('');\n  !isInputValid ? showInputError(formElement, inputElement, Validationconfig) : hideInputError(formElement, inputElement, Validationconfig);\n};\nvar setEventListeners = function setEventListeners(formElement, Validationconfig) {\n  var inputList = _toConsumableArray(formElement.querySelectorAll(Validationconfig.inputSelector));\n  var buttonElement = formElement.querySelector(Validationconfig.submitButtonSelector);\n  inputList.forEach(function (inputElement) {\n    inputElement.addEventListener('input', function () {\n      checkInputValidity(formElement, inputElement, Validationconfig);\n      toggleButtonState(formElement.checkValidity(), buttonElement, Validationconfig);\n    });\n  });\n};\nvar clearValidation = function clearValidation(formElement, config) {\n  var formSubmitButton = formElement.querySelector(config.submitButtonSelector);\n  toggleButtonState(false, formSubmitButton, config);\n  var inputList = _toConsumableArray(formElement.querySelectorAll(config.inputSelector));\n  inputList.forEach(function (inputElement) {\n    return hideInputError(formElement, inputElement, config);\n  });\n};\nvar enableValidation = function enableValidation(config) {\n  var formList = _toConsumableArray(document.querySelectorAll(config.formSelector));\n  formList.forEach(function (formElement) {\n    return setEventListeners(formElement, config);\n  });\n};\n;// CONCATENATED MODULE: ./src/components/index.js\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || components_unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction components_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return components_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return components_arrayLikeToArray(o, minLen); }\nfunction components_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\nvar places = document.querySelector('.places');\nvar placesList = places.querySelector('.places__list');\nvar profileEditForm = document.forms['edit-profile'];\nvar profileTitle = document.querySelector('.profile__title');\nvar profileDescription = document.querySelector('.profile__description');\nvar profileImage = document.querySelector('.profile__image');\nvar nameInput = profileEditForm.querySelector('.popup__input_type_name');\nvar jobInput = profileEditForm.querySelector('.popup__input_type_description');\nvar newPlaceForm = document.forms['new-place'];\nvar placeInput = newPlaceForm.querySelector('.popup__input_type_card-name');\nvar linkInput = newPlaceForm.querySelector('.popup__input_type_url');\nvar updateAvatarForm = document.forms['update-avatar'];\nvar avatarLinkInput = updateAvatarForm.querySelector('.popup__input_type_avatar_link');\nvar popups = document.querySelectorAll('.popup');\nvar popupTypeEdit = document.querySelector('.popup_type_edit');\nvar popupTypeNewCard = document.querySelector('.popup_type_new-card');\nvar popupTypeImage = document.querySelector('.popup_type_image');\nvar popupUpdateAvatar = document.querySelector('.popup_update_avatar');\nvar profileEditButton = document.querySelector('.profile__edit-button');\nvar popupCloseButtons = document.querySelectorAll('.popup__close');\nvar profileAddButton = document.querySelector('.profile__add-button');\nvar cardData = getInitialCards();\nvar profileData = getProfileData();\nvar setprofileData = function setprofileData(profileData) {\n  profileTitle.textContent = profileData.name;\n  profileDescription.textContent = profileData.about;\n  profileImage.style.backgroundImage = \"url(\".concat(profileData.avatar, \")\");\n};\nvar handleFormProfileEditSubmit = function handleFormProfileEditSubmit(evt) {\n  evt.preventDefault();\n  popupTypeEdit.querySelector('.button').textContent = 'Сохранение...';\n  changeProfileData(nameInput.value, jobInput.value).then(function (profileData) {\n    setprofileData(profileData);\n    popupTypeEdit.querySelector('.button').textContent = 'Сохранить';\n    closeModal(popupTypeEdit);\n  }).catch(function (err) {\n    return console.log(err);\n  });\n};\nvar handleFormNewPlaceSubmit = function handleFormNewPlaceSubmit(evt) {\n  evt.preventDefault();\n  newPlaceForm.querySelector('.button').textContent = 'Сохранение...';\n  var newCardData = addNewPlace(placeInput.value, linkInput.value);\n  Promise.all([profileData, newCardData]).then(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      profileData = _ref2[0],\n      newCardData = _ref2[1];\n    placesList.prepend(createCard(newCardData.name, newCardData.link, handleDeleteCard, likeCard, openTypeImagePopup, newCardData, profileData));\n    newPlaceForm.querySelector('.button').textContent = 'Сохранить';\n    newPlaceForm.reset();\n    closeModal(popupTypeNewCard);\n  }).catch(function (err) {\n    return console.log(err);\n  });\n};\nvar handleFormUpdateAvatarSubmit = function handleFormUpdateAvatarSubmit(evt) {\n  evt.preventDefault();\n  updateAvatarForm.querySelector('.button').textContent = 'Сохранение...';\n  changeAvatar(avatarLinkInput.value).then(function (profileData) {\n    profileImage.style.backgroundImage = \"url(\".concat(profileData.avatar, \")\");\n    updateAvatarForm.querySelector('.button').textContent = 'Сохранить';\n    updateAvatarForm.reset();\n    closeModal(popupUpdateAvatar);\n  }).catch(function (err) {\n    return console.log(err);\n  });\n};\nvar openTypeImagePopup = function openTypeImagePopup(cardTitle, cardImage) {\n  popupTypeImage.querySelector('.popup__image').src = cardImage;\n  popupTypeImage.querySelector('.popup__image').alt = \"\\u0424\\u043E\\u0442\\u043E \".concat(cardTitle);\n  popupTypeImage.querySelector('.popup__caption').textContent = cardTitle;\n  openModal(popupTypeImage);\n};\nprofileEditForm.addEventListener('submit', handleFormProfileEditSubmit);\nnewPlaceForm.addEventListener('submit', handleFormNewPlaceSubmit);\nupdateAvatarForm.addEventListener('submit', handleFormUpdateAvatarSubmit);\nprofileEditButton.addEventListener('click', function () {\n  clearValidation(profileEditForm, {\n    formSelector: '.popup__form',\n    inputSelector: '.popup__input',\n    submitButtonSelector: '.popup__button',\n    inactiveButtonClass: 'popup__button_disabled',\n    inputErrorClass: 'popup__input_type_error',\n    errorClass: 'popup__error_visible'\n  });\n  openModal(popupTypeEdit);\n  nameInput.value = profileTitle.textContent;\n  jobInput.value = profileDescription.textContent;\n});\npopupCloseButtons.forEach(function (button) {\n  return button.addEventListener('click', function (evt) {\n    return closeModal(evt.target.closest('.popup'));\n  });\n});\nprofileAddButton.addEventListener('click', function () {\n  clearValidation(newPlaceForm, {\n    formSelector: '.popup__form',\n    inputSelector: '.popup__input',\n    submitButtonSelector: '.popup__button',\n    inactiveButtonClass: 'popup__button_disabled',\n    inputErrorClass: 'popup__input_type_error',\n    errorClass: 'popup__error_visible'\n  });\n  openModal(popupTypeNewCard);\n});\npopups.forEach(function (popup) {\n  return popup.addEventListener('click', closePopupByOverlayClick);\n});\nprofileImage.addEventListener('click', function () {\n  clearValidation(updateAvatarForm, {\n    formSelector: '.popup__form',\n    inputSelector: '.popup__input',\n    submitButtonSelector: '.popup__button',\n    inactiveButtonClass: 'popup__button_disabled',\n    inputErrorClass: 'popup__input_type_error',\n    errorClass: 'popup__error_visible'\n  });\n  openModal(popupUpdateAvatar);\n});\nenableValidation({\n  formSelector: '.popup__form',\n  inputSelector: '.popup__input',\n  submitButtonSelector: '.popup__button',\n  inactiveButtonClass: 'popup__button_disabled',\n  inputErrorClass: 'popup__input_type_error',\n  errorClass: 'popup__error_visible'\n});\nPromise.all([profileData, cardData]).then(function (_ref3) {\n  var _ref4 = _slicedToArray(_ref3, 2),\n    profileData = _ref4[0],\n    cardData = _ref4[1];\n  setprofileData(profileData);\n  cardData.forEach(function (cardElement) {\n    return placesList.append(createCard(cardElement.name, cardElement.link, handleDeleteCard, likeCard, openTypeImagePopup, cardElement, profileData));\n  });\n}).catch(function (err) {\n  return console.log(err);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///333\n")}},__webpack_require__={d:(Q,F)=>{for(var U in F)__webpack_require__.o(F,U)&&!__webpack_require__.o(Q,U)&&Object.defineProperty(Q,U,{enumerable:!0,get:F[U]})},o:(Q,F)=>Object.prototype.hasOwnProperty.call(Q,F)},__webpack_exports__={};__webpack_modules__[333](0,__webpack_exports__,__webpack_require__)})();